package ${package}
import com.github.pagehelper.Page;
import com.mg.live.service.base.dto.BaseResponseDto;
import com.mg.live.service.base.dto.PagedResponseDto;
import com.mg.live.service.base.exception.BusinessException;
import com.mg.live.service.order.bo.PagedQueryLiveOrderInput;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}" )
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 新增${comments}
     *
     * @param reqDto reqDto
     * @return ${comments}
     */
    @PostMapping("insert" )
    public BaseResponseDto<${className}> insert(@RequestBody Insert${className}ReqDto reqDto) {
        Insert${className}Input insert${className}Input = new Insert${className}Input();

        BeanUtils.copyProperties(reqDto, insert${className}Input);
        int id = ${classname}Service.insert(insert${className}Input);

            ${className}Entity ${classname}Entity = ${classname}Service.getById(id);
        ${className} ${classname} =${classname}Service.doToDomain(${classname}Entity);

        return BaseResponseDto.ok(${classname});
    }

    /**
     * 修改${comments}
     *
     * @param reqDto reqDto
     * @return ${comments}
     */
    @PostMapping("update" )
    public BaseResponseDto<${className}> update(@RequestBody Update${className}ReqDto reqDto) {
        Update${className}Input update${className}Input = new Update${className}Input();

        BeanUtils.copyProperties(reqDto, update${className}Input);

        boolean success = ${classname}Service.update(update${className}Input);
        if (!success) {
            throw new BusinessException("更新失败。" );
        }

            ${className}Entity ${classname}Entity = ${classname}Service.getById(reqDto.getId());
        ${className} ${classname} =${classname}Service.doToDomain(${classname}Entity);

        return BaseResponseDto.ok(${classname});
    }

    /**
     * 删除${comments}
     *
     * @param id id
     */
    @GetMapping("delete/{id}" )
    public BaseResponseDto delete(@PathVariable(value = "id" ) int id) {
        if (id <= 0) {
            throw new BusinessException("要删除的${comments}id不能为空。" );
        }
            ${classname}Service.delete(id);

        return BaseResponseDto.ok();
    }

    /**
     * 分页查询${comments}
     *
     * @return 分页后的${comments}
     */
    @PostMapping("pagedQuery" )
    public PagedResponseDto
            <List<${className}>> pagedQuery(@RequestBody PagedQuery${className}ReqDto reqDto) {
        PagedQuery${className}Input pagedQuery${className}Input = new PagedQuery${className}Input();
        pagedQuery${className}Input
                .setPageIndex(reqDto.getPageIndex())
                .setPageSize(reqDto.getPageSize());

        Page<${className}Entity> page = ${classname}Service.pagedQuery(pagedQuery${className}Input);

        List<${className}> ${classname}s = ${classname}Service.doToDomain(page);

        return PagedResponseDto.ok(${classname}s, page.getTotal(), page.getPageNum(), page.getPageSize());
    }

    /**
     * 根据id获取${comments}
     *
     * @param id id
     * @return ${comments}
     */
    @GetMapping("{id}" )
    public BaseResponseDto<${className}> getById(@PathVariable int id) {
        if (id <= 0) {
            throw new BusinessException("要获取的${comments}Id不能为空。" );
        }

            ${className}Entity ${classname}Entity = ${classname}Service.getById(id);
        if (${classname}Entity == null) {
            throw new BusinessException(String.format("要获取的${comments}id:%s不存在。" , id));
        }

        ${className} ${classname}=${classname}Service.doToDomain(${classname}Entity);
        return BaseResponseDto.ok(${classname});
    }

    /**
     * 根据批量id获取${comments}
     *
     * @param ids ids
     * @return ${comments}
     */
    @PostMapping("listByBatchIds" )
    public BaseResponseDto<List<${className}>> listByBatchIds(@RequestBody List<Integer> ids) {
        if (ids == null || ids.size() <= 0) {
            throw new BusinessException("要获取的${comments}Id集合不能为空。" );
        }

        List<${className}Entity> ${classname}Entitys = ${classname}Service.listByBatchIds(ids);

        List<${className}> ${classname}s = ${classname}Service.doToDomain(${classname}Entitys);
        return BaseResponseDto.ok(${classname}s);
    }

}
